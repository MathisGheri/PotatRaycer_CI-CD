Vec3 Decorator::colorloop(const Ray &r, const std::vector<std::shared_ptr<IHitable>> &_world, Light _light)
{
    int depth = 0;
    hit_record_t rec;
    Ray scattered, temp_r = r;
    Vec3 attenuation, temp;
    
    if (hit(temp_r, 0.001, MAXFLOAT, rec)) {
        bool cond = false;
        cond = rec.mat_ptr->scatter(temp_r, rec, attenuation, scattered, _light, _world);

        depth++;
        temp = attenuation;
        if (!(hit(temp_r, 0.001, MAXFLOAT, rec))) {
            if (cond)
                return temp;
                // return (temp + _light.color) / 2;
            else
                return Vec3(0.0, 0.0, 0.0);
        }
        if (cond)
            return temp;
            // return (temp + _light.color) / 2;
        temp_r = scattered;
        while (depth < 50) {
            cond = rec.mat_ptr->scatter(temp_r, rec, attenuation, scattered, _light, _world);

            depth++;
            temp *= attenuation;
            if (!(hit(temp_r, 0.001, MAXFLOAT, rec))) {
                if (cond)
                    return temp;
                    // return (temp + _light.color) / 2;
                else
                    return Vec3(0.0, 0.0, 0.0);
            }
            if (cond)
                return temp;
                // return (temp + _light.color) / 2;
            temp_r = scattered;
        }
        return temp;
        // return (temp + _light.color) / 2;
    } else {
        return Vec3(0, 0, 0);
    }
}
